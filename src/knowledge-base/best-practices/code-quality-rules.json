{
  "code_quality_rules": {
    "naming_conventions": {
      "title": "Naming Conventions",
      "description": "Rules for consistent and meaningful naming",
      "severity": "MEDIUM",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "var\\s+[a-z]{1,2}\\b|let\\s+[a-z]{1,2}\\b|const\\s+[a-z]{1,2}\\b",
          "description": "Variable names should be descriptive (avoid single/double letter names)",
          "example": "let a = 5;",
          "fix": "let userAge = 5;",
          "category": "naming"
        },
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "function\\s+[a-z]{1,3}\\(",
          "description": "Function names should be descriptive",
          "example": "function calc() {}",
          "fix": "function calculateTotal() {}",
          "category": "naming"
        },
        {
          "type": "regex",
          "language": "python",
          "pattern": "def\\s+[a-z]{1,3}\\(",
          "description": "Function names should be descriptive",
          "example": "def calc():",
          "fix": "def calculate_total():",
          "category": "naming"
        },
        {
          "type": "regex",
          "language": "java",
          "pattern": "class\\s+[a-z]",
          "description": "Class names should start with uppercase letter",
          "example": "class user {}",
          "fix": "class User {}",
          "category": "naming"
        }
      ]
    },
    "function_complexity": {
      "title": "Function Complexity",
      "description": "Rules to maintain reasonable function complexity",
      "severity": "HIGH",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "function[^{]*\\{[^}]{500,}\\}",
          "description": "Function is too long (>500 characters), consider breaking it down",
          "example": "function verylongfunction() { /* 500+ chars */ }",
          "fix": "Break into smaller, focused functions",
          "category": "complexity"
        },
        {
          "type": "regex",
          "language": "all",
          "pattern": "(if|else if).*\\{[^}]*if.*\\{[^}]*if.*\\{[^}]*if",
          "description": "Too many nested conditions, consider refactoring",
          "example": "if (a) { if (b) { if (c) { if (d) {} } } }",
          "fix": "Use early returns or extract methods",
          "category": "complexity"
        }
      ]
    },
    "code_duplication": {
      "title": "Code Duplication",
      "description": "Detect duplicated code blocks",
      "severity": "MEDIUM",
      "patterns": [
        {
          "type": "regex",
          "language": "all",
          "pattern": "console\\.log\\(.*\\);\\s*console\\.log\\(.*\\);\\s*console\\.log\\(.*\\);",
          "description": "Multiple consecutive console.log statements, consider using a function",
          "example": "console.log(a); console.log(b); console.log(c);",
          "fix": "function logMultiple(...values) { values.forEach(v => console.log(v)); }",
          "category": "duplication"
        }
      ]
    },
    "error_handling": {
      "title": "Error Handling",
      "description": "Proper error handling practices",
      "severity": "HIGH",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "catch\\s*\\([^)]*\\)\\s*\\{\\s*console\\.log",
          "description": "Avoid only logging errors, handle them appropriately",
          "example": "catch (e) { console.log(e); }",
          "fix": "catch (e) { logger.error('Operation failed', e); throw new ProcessingError(e); }",
          "category": "error_handling"
        },
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "new Promise\\([^)]*\\)\\s*(?!\\.catch)",
          "description": "Promise should have error handling with .catch()",
          "example": "new Promise((resolve, reject) => { ... })",
          "fix": "new Promise((resolve, reject) => { ... }).catch(handleError)",
          "category": "error_handling"
        },
        {
          "type": "regex",
          "language": "python",
          "pattern": "except\\s*:",
          "description": "Avoid bare except clauses, be specific about exceptions",
          "example": "except:",
          "fix": "except ValueError as e:",
          "category": "error_handling"
        }
      ]
    },
    "performance": {
      "title": "Performance Issues",
      "description": "Common performance anti-patterns",
      "severity": "MEDIUM",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "for\\s*\\([^)]*\\)\\s*\\{[^}]*document\\.getElementById",
          "description": "DOM query inside loop, cache the element outside",
          "example": "for (let i = 0; i < 100; i++) { document.getElementById('el').style.color = 'red'; }",
          "fix": "const el = document.getElementById('el'); for (let i = 0; i < 100; i++) { el.style.color = 'red'; }",
          "category": "performance"
        },
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "\\+\\=\\s*['\"`][^'`\"]*['\"`]\\s*\\+",
          "description": "String concatenation in loop, use array and join instead",
          "example": "for (let i = 0; i < items.length; i++) { result += items[i] + ','; }",
          "fix": "const parts = []; for (let i = 0; i < items.length; i++) { parts.push(items[i]); } const result = parts.join(',');",
          "category": "performance"
        },
        {
          "type": "regex",
          "language": "python",
          "pattern": "\\+\\=.*\\[.*\\].*for.*in",
          "description": "List concatenation in loop, use list comprehension or extend",
          "example": "for item in items: result += [process(item)]",
          "fix": "result.extend(process(item) for item in items)",
          "category": "performance"
        }
      ]
    },
    "maintainability": {
      "title": "Maintainability",
      "description": "Code maintainability best practices",
      "severity": "MEDIUM",
      "patterns": [
        {
          "type": "regex",
          "language": "all",
          "pattern": "\\b\\d{4,}\\b",
          "description": "Magic numbers should be named constants",
          "example": "if (status === 200) {}",
          "fix": "const HTTP_OK = 200; if (status === HTTP_OK) {}",
          "category": "maintainability"
        },
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "var\\s+",
          "description": "Use const or let instead of var for better scoping",
          "example": "var name = 'John';",
          "fix": "const name = 'John';",
          "category": "maintainability"
        },
        {
          "type": "regex",
          "language": "all",
          "pattern": "TODO|FIXME|HACK",
          "description": "Code contains TODO/FIXME comments, consider addressing them",
          "example": "// TODO: implement this later",
          "fix": "Create proper tickets and implement the functionality",
          "category": "maintainability"
        }
      ]
    },
    "code_style": {
      "title": "Code Style",
      "description": "Consistent code formatting and style",
      "severity": "LOW",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "\\{[^\\s]|[^\\s]\\}",
          "description": "Add spaces around curly braces",
          "example": "if (condition){code}",
          "fix": "if (condition) { code }",
          "category": "style"
        },
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "==(?!=)",
          "description": "Use strict equality (===) instead of loose equality (==)",
          "example": "if (value == null)",
          "fix": "if (value === null)",
          "category": "style"
        },
        {
          "type": "regex",
          "language": "python",
          "pattern": "\\w+\\(\\w+\\s*,\\w+",
          "description": "Add space after comma in function calls",
          "example": "func(a,b,c)",
          "fix": "func(a, b, c)",
          "category": "style"
        }
      ]
    },
    "documentation": {
      "title": "Documentation",
      "description": "Code documentation standards",
      "severity": "LOW",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "function\\s+\\w+\\([^)]*\\)\\s*\\{(?!\\s*\\/\\*\\*|\\s*\\/\\/)",
          "description": "Public functions should have documentation comments",
          "example": "function calculateTax(amount) { return amount * 0.1; }",
          "fix": "/** Calculate tax for given amount */ function calculateTax(amount) { return amount * 0.1; }",
          "category": "documentation"
        },
        {
          "type": "regex",
          "language": "python",
          "pattern": "class\\s+\\w+[^:]*:(?!\\s*\"\"\"|\\s*''')",
          "description": "Classes should have docstrings",
          "example": "class User: def __init__(self): pass",
          "fix": "class User: \"\"\"Represents a user in the system\"\"\" def __init__(self): pass",
          "category": "documentation"
        }
      ]
    }
  },
  "best_practices": {
    "solid_principles": {
      "title": "SOLID Principles",
      "description": "Object-oriented design principles",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "class\\s+\\w+[^{]*\\{[^}]*constructor[^}]*\\{[^}]*this\\.\\w+\\s*=[^}]*this\\.\\w+\\s*=[^}]*this\\.\\w+\\s*=",
          "description": "Class has too many responsibilities (violates Single Responsibility Principle)",
          "example": "class User { constructor() { this.name = ''; this.email = ''; this.database = new DB(); } }",
          "fix": "Separate concerns into different classes (User, UserRepository, etc.)",
          "category": "solid"
        }
      ]
    },
    "dry_principle": {
      "title": "Don't Repeat Yourself",
      "description": "Avoid code duplication",
      "patterns": [
        {
          "type": "regex",
          "language": "all",
          "pattern": "(\\w+\\.\\w+\\([^)]*\\);)\\s*\\1",
          "description": "Duplicate method calls detected",
          "example": "user.save(); user.save();",
          "fix": "Extract into a variable or function if intentional",
          "category": "dry"
        }
      ]
    }
  },
  "language_specific": {
    "javascript": {
      "title": "JavaScript Best Practices",
      "patterns": [
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "\\$\\('[^']*'\\)\\.click\\(",
          "description": "Use addEventListener instead of jQuery click for better performance",
          "example": "$('#button').click(handler)",
          "fix": "document.getElementById('button').addEventListener('click', handler)",
          "category": "modern_js"
        },
        {
          "type": "regex",
          "language": "javascript",
          "pattern": "new Date\\(\\)\\.getTime\\(\\)",
          "description": "Use Date.now() instead of new Date().getTime()",
          "example": "const timestamp = new Date().getTime();",
          "fix": "const timestamp = Date.now();",
          "category": "modern_js"
        }
      ]
    },
    "python": {
      "title": "Python Best Practices",
      "patterns": [
        {
          "type": "regex",
          "language": "python",
          "pattern": "len\\(\\w+\\)\\s*==\\s*0",
          "description": "Use 'not list' instead of 'len(list) == 0'",
          "example": "if len(items) == 0:",
          "fix": "if not items:",
          "category": "pythonic"
        },
        {
          "type": "regex",
          "language": "python",
          "pattern": "\\[.*for.*in.*if.*\\]",
          "description": "Consider using generator expression for memory efficiency",
          "example": "[x for x in items if x.active]",
          "fix": "(x for x in items if x.active) # if used once",
          "category": "pythonic"
        }
      ]
    }
  },
  "metadata": {
    "version": "1.0.0",
    "last_updated": "2025-01-20",
    "total_rules": 25,
    "categories": ["naming", "complexity", "error_handling", "performance", "maintainability", "style", "documentation"]
  }
}
